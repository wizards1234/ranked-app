// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  password    String?
  displayName String?  @map("display_name")
  avatarUrl   String?  @map("avatar_url")
  bio         String?
  isVerified  Boolean  @default(false) @map("is_verified")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  rankings    Ranking[]
  comments    Comment[]
  reactions   Reaction[]
  followers   Follow[]  @relation("UserFollowers")
  following   Follow[]  @relation("UserFollowing")

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String?  @db.VarChar(7)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  rankings    Ranking[]

  @@map("categories")
}

model Ranking {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  categoryId    String   @map("category_id")
  title         String
  description   String?
  isPublic      Boolean  @default(true) @map("is_public")
  allowComments Boolean  @default(true) @map("allow_comments")
  viewCount     Int      @default(0) @map("view_count")
  likeCount     Int      @default(0) @map("like_count")
  commentCount  Int      @default(0) @map("comment_count")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category       @relation(fields: [categoryId], references: [id])
  items         RankingItem[]
  comments      Comment[]
  reactions     Reaction[]
  rankingTags   RankingTag[]

  @@map("rankings")
}

model RankingItem {
  id          String   @id @default(cuid())
  rankingId   String   @map("ranking_id")
  position    Int
  title       String
  description String?
  imageUrl    String?  @map("image_url")
  externalUrl String?  @map("external_url")
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  ranking     Ranking  @relation(fields: [rankingId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@unique([rankingId, position])
  @@map("ranking_items")
}

model Comment {
  id        String   @id @default(cuid())
  rankingId String   @map("ranking_id")
  userId    String   @map("user_id")
  parentId  String?  @map("parent_id")
  content   String
  likeCount Int      @default(0) @map("like_count")
  isDeleted Boolean  @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  ranking   Ranking  @relation(fields: [rankingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  reactions Reaction[]

  @@map("comments")
}

model Reaction {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  targetType String   @map("target_type") // 'ranking', 'comment', 'ranking_item'
  targetId   String   @map("target_id")
  emoji      String
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ranking    Ranking?     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  comment    Comment?     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  rankingItem RankingItem? @relation(fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([userId, targetType, targetId, emoji])
  @@map("reactions")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Tag {
  id         String   @id @default(cuid())
  name       String   @unique
  slug       String   @unique
  usageCount Int      @default(0) @map("usage_count")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  rankingTags RankingTag[]

  @@map("tags")
}

model RankingTag {
  rankingId String @map("ranking_id")
  tagId     String @map("tag_id")

  // Relations
  ranking Ranking @relation(fields: [rankingId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([rankingId, tagId])
  @@map("ranking_tags")
}